(()=>{var e={901:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"#battleField{\n    position: relative;\n    display: grid;\n    grid-template-columns: 660px 260px;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n.playerField{\n    display: grid;\n    position: relative;\n    grid-template-columns: repeat(11,60px);\n    grid-template-rows: repeat(11,60px);\n    border: black solid 1px;\n}\n.messageBox{\n    position: relative;\n    overflow: auto;\n    border: black solid 1px;\n    height: 400px;\n}\n.smallBox{\n    border: rgb(173, 173, 173) solid 1px;\n}\n\n.ship{\n    background-color: green;\n}\n\n.shipError{\n    background-color: red;\n}\n\n.alertBox{\n    color: red;\n    position: absolute;\n    bottom: 0;\n}\n\n#previewBox{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 150px ;\n    border: rgb(173, 173, 173) solid 1px;\n}\n\n.hit{\n    background-color: rgb(177, 145, 145);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.miss{\n    background-color: rgb(51, 168, 223);\n}\n\n.turnBlock{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    font-size: large;\n    font-weight: bold;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(158, 157, 157,0.5);\n}\n\n.nameTag{\n    size: 10px;\n}\n\n.Carrier{\n    background-color: rgb(130, 130, 209);\n}\n.Battleship{\n    background-color: rgb(110, 110, 177);\n}\n.Destroyer{\n    background-color: rgb(91, 91, 145);\n}\n.Submarine{\n    background-color: rgb(63, 63, 100);\n}\n.PatrolBoat{\n    background-color: rgb(43, 43, 68);\n} \n","",{version:3,sources:["webpack://./src/battleField.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,aAAa;IACb,kCAAkC;IAClC,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,sCAAsC;IACtC,mCAAmC;IACnC,uBAAuB;AAC3B;AACA;IACI,kBAAkB;IAClB,cAAc;IACd,uBAAuB;IACvB,aAAa;AACjB;AACA;IACI,oCAAoC;AACxC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,UAAU;IACV,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,oCAAoC;AACxC;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;IACjB,WAAW;IACX,YAAY;IACZ,yCAAyC;AAC7C;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,oCAAoC;AACxC;AACA;IACI,oCAAoC;AACxC;AACA;IACI,kCAAkC;AACtC;AACA;IACI,kCAAkC;AACtC;AACA;IACI,iCAAiC;AACrC",sourcesContent:["#battleField{\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: 660px 260px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n}\r\n.playerField{\r\n    display: grid;\r\n    position: relative;\r\n    grid-template-columns: repeat(11,60px);\r\n    grid-template-rows: repeat(11,60px);\r\n    border: black solid 1px;\r\n}\r\n.messageBox{\r\n    position: relative;\r\n    overflow: auto;\r\n    border: black solid 1px;\r\n    height: 400px;\r\n}\r\n.smallBox{\r\n    border: rgb(173, 173, 173) solid 1px;\r\n}\r\n\r\n.ship{\r\n    background-color: green;\r\n}\r\n\r\n.shipError{\r\n    background-color: red;\r\n}\r\n\r\n.alertBox{\r\n    color: red;\r\n    position: absolute;\r\n    bottom: 0;\r\n}\r\n\r\n#previewBox{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 150px ;\r\n    border: rgb(173, 173, 173) solid 1px;\r\n}\r\n\r\n.hit{\r\n    background-color: rgb(177, 145, 145);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.miss{\r\n    background-color: rgb(51, 168, 223);\r\n}\r\n\r\n.turnBlock{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    font-size: large;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(158, 157, 157,0.5);\r\n}\r\n\r\n.nameTag{\r\n    size: 10px;\r\n}\r\n\r\n.Carrier{\r\n    background-color: rgb(130, 130, 209);\r\n}\r\n.Battleship{\r\n    background-color: rgb(110, 110, 177);\r\n}\r\n.Destroyer{\r\n    background-color: rgb(91, 91, 145);\r\n}\r\n.Submarine{\r\n    background-color: rgb(63, 63, 100);\r\n}\r\n.PatrolBoat{\r\n    background-color: rgb(43, 43, 68);\r\n} \r\n"],sourceRoot:""}]);const s=a},203:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"#introBox{\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    gap: 10px;\n    align-items: center;\n    height: 500px;\n    justify-content: center;\n}\n#introBox>div:first-child{\n    font-size: 100px;\n}\n#introForm{\n    width: 150px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    border: black 1px solid;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n}\n\n.nameBox{\n    gap: 20px;\n}\n\n#loginButton{\n    width: 60px;\n    height: 20px;\n}","",{version:3,sources:["webpack://./src/intro.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,gBAAgB;AACpB;AACA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,WAAW;IACX,YAAY;AAChB",sourcesContent:["#introBox{\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    gap: 10px;\r\n    align-items: center;\r\n    height: 500px;\r\n    justify-content: center;\r\n}\r\n#introBox>div:first-child{\r\n    font-size: 100px;\r\n}\r\n#introForm{\r\n    width: 150px;\r\n    padding: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: black 1px solid;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n}\r\n\r\n.nameBox{\r\n    gap: 20px;\r\n}\r\n\r\n#loginButton{\r\n    width: 60px;\r\n    height: 20px;\r\n}"],sourceRoot:""}]);const s=a},807:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,":root{\n    --winScreenWidth: 350px;\n    --winScreenHeight: 150px;\n}\n\n\nbody{\n    position: relative;\n}\n#winScreen{\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    padding: 10px;\n    gap: 10px;\n    background-color: rgb(233, 233, 142);\n    border: 1px black solid;\n    top:calc(100% - var(--winScreenHeight));\n    left: calc(50% - var(--winScreenWidth));\n    width: var(--winScreenWidth);\n    height: var(--winScreenHeight);\n}\n#winScreen>div:nth-child(1){\n    font-size: 50px;\n}\n#winScreen>div:nth-child(2){\n    display: flex;\n    justify-content: center;\n    gap: 15px;\n}\n\n#RestartButton,#EndButton{\n    width: 100px;\n    height: 50px;\n}","",{version:3,sources:["webpack://./src/winScreen.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,wBAAwB;AAC5B;;;AAGA;IACI,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;IACb,SAAS;IACT,oCAAoC;IACpC,uBAAuB;IACvB,uCAAuC;IACvC,uCAAuC;IACvC,4BAA4B;IAC5B,8BAA8B;AAClC;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB",sourcesContent:[":root{\r\n    --winScreenWidth: 350px;\r\n    --winScreenHeight: 150px;\r\n}\r\n\r\n\r\nbody{\r\n    position: relative;\r\n}\r\n#winScreen{\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    gap: 10px;\r\n    background-color: rgb(233, 233, 142);\r\n    border: 1px black solid;\r\n    top:calc(100% - var(--winScreenHeight));\r\n    left: calc(50% - var(--winScreenWidth));\r\n    width: var(--winScreenWidth);\r\n    height: var(--winScreenHeight);\r\n}\r\n#winScreen>div:nth-child(1){\r\n    font-size: 50px;\r\n}\r\n#winScreen>div:nth-child(2){\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 15px;\r\n}\r\n\r\n#RestartButton,#EndButton{\r\n    width: 100px;\r\n    height: 50px;\r\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=i[l]||0,A="".concat(l," ").concat(u);i[l]=u+1;var d=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},772:e=>{const t={layout:!1,current:[null,[null,null]],shipType:[0,"X"],shipLocation:[null,null,null,null,null],shipName:["Carrier","Battleship","Destroyer","Submarine","PatrolBoat"],shipLength:[5,4,3,3,2]};function n(e,t){for(let n=0;n<=t;n+=1)for(let r=0;r<=t;r+=1){const t=document.createElement("div");t.setAttribute("class","smallBox"),t.setAttribute("data-id",`${n},${r}`),0===n&&r>0?t.textContent=String.fromCharCode(64+r):0===r&&n>0&&(t.textContent=n),e.append(t)}}function r(e,t){const n=document.createElement("div");n.id="nametag",n.textContent=e,t.append(n)}function o(){const e=document.querySelector("#player1Mess"),n=document.querySelector("#previewBox"),r=document.createElement("div");if(r.id="previewBox",null===e)return;null!==n&&n.remove();const[o,i]=t.shipType,a=document.createElement("div");a.setAttribute("id","shipModel");let s="column";"Y"===i&&(s="row"),a.style=`display:flex; flex-direction:${s};`;for(let e=0;e<t.shipLength[o];e+=1){const e=document.createElement("div");e.style="width:20px; height:20px; border: black solid 1px;",a.append(e)}r.append(a),e.append(r)}function i(e,n){if(0===e[0]||0===e[1])return;let r=n;const o=t.shipType[1],i=t.shipLength[t.shipType[0]],a=Math.floor(i/2),s=[e[0]-a,e[1]-a],c=[s[0]+i-1,s[1]+i-1];((s[0]<=0||c[0]>10)&&"X"===o||(s[1]<=0||c[1]>10)&&"Y"===o)&&(r="shipError");for(let t=0;t<i;t+=1)"X"===o?s[0]+t>0&&s[0]+t<=10&&document.querySelector(`[data-id = "${s[0]+t},${e[1]}"]`).classList.add(`${r}`):"Y"===o&&s[1]+t>0&&s[1]+t<=10&&document.querySelector(`[data-id = "${e[0]},${s[1]+t}"]`).classList.add(`${r}`)}function a(e){let t=document.querySelectorAll(`.${e}`);t=Array.from(t),t.forEach((t=>{t.classList.remove(`${e}`)}))}function s(e){let t=document.querySelectorAll(`.${e}`),n=!1;return t=Array.from(t),t.forEach((e=>{let t=e.classList.value;t=t.split(" "),("ship"===t[2]||t.length>=4)&&(n=!0)})),n}function c(e){const t=document.querySelector(".alertBox");null!==t&&t.remove();const n=document.querySelector(".messageBox"),r=document.createElement("div");r.classList.add("alertBox"),r.textContent=e,n.append(r),setTimeout((()=>{r.remove()}),3e3)}e.exports={layout:function(e,r){if("number"!=typeof r)throw new Error("TypeError");if(r>2)throw new Error("max 2");const o=document.createElement("div");o.setAttribute("id","battleField");for(let e=0;e<r;e+=1){const t=document.createElement("div");t.setAttribute("id",`player${e+1}field`),t.setAttribute("class","playerField"),n(t,10);const r=document.createElement("div");r.setAttribute("id",`player${e+1}Mess`),r.setAttribute("class","messageBox"),o.append(t,r)}return e.append(o),t.layout=!0,o},setUp:function(e){if(!1===t.layout)return null;const n=document.querySelector("#player1Mess");r(e,n),c("Please place your ship! hit SET button when you done"),function(){const e=document.querySelector("#player1Mess"),n=document.createElement("select");n.setAttribute("name","shipName"),n.setAttribute("id","shipName"),t.shipName.forEach(((e,r)=>{const o=document.createElement("option");o.setAttribute("value",`${r}`),o.textContent=`${t.shipName[r]}`,n.append(o)})),e.append(n)}(),function(){const e=document.querySelector("#player1Mess"),n=document.createElement("button");n.setAttribute("id","rotationButton"),n.textContent="Rotation",n.addEventListener("click",(()=>{"X"===t.shipType[1]?t.shipType[1]="Y":"Y"===t.shipType[1]&&(t.shipType[1]="X")})),e.append(n)}();const l=new Promise((e=>{(function(){const e=document.querySelector("#player1Mess"),t=document.createElement("button");return t.id="setButton",t.textContent="SET",e.append(t),t})().addEventListener("click",(()=>{const n=function(){const e=[];return t.shipLocation.forEach(((t,n)=>{null!==t&&void 0!==t[0]||e.push(n)})),e}();if(void 0===n[0])e(t.shipLocation),document.querySelector("#battleField").remove(),t.layout=!1,t.current=[null,[null,null]],t.shipType=[0,"X"],t.shipLocation=[null,null,null,null,null];else{let e="missing ";n.forEach((n=>{e+=`${t.shipName[n]} `})),c(e)}}))}));o(),n.addEventListener("click",(()=>{const e=document.querySelector("#shipName>option:checked");null!==e&&(t.shipType[0]=Number(e.value),o())}));let u=document.querySelectorAll("#player1field>div.smallBox");return u=Array.from(u),u.forEach((e=>{e.addEventListener("click",(e=>{const n=t.shipType[0],r=e.target.dataset.id,[o,l]=r.split(","),u=t.shipName[n];null!==t.shipLocation[n]&&a(u),i([Number(o),Number(l)],`${u}`),s(u)?(a(u),t.shipLocation[n]=null,c("ship collided!!! Please choose different location!")):t.shipLocation[n]=function(e){let t=document.querySelectorAll(`.${e}`);return t=Array.from(t),t.map((e=>{const t=e.dataset.id,[n,r]=t.split(",");return[Number(n),Number(r)]}))}(u)})),e.addEventListener("mouseenter",(e=>{const t=e.target.dataset.id,[n,r]=t.split(",");i([Number(n),Number(r)],"ship"),s("ship")&&i([Number(n),Number(r)],"shipError")})),e.addEventListener("mouseleave",(()=>{a("ship"),a("shipError")}))})),l},battle:function(e,n){if(!1===t.layout)return null;const o=document.querySelector("#player1field"),i=document.querySelector("#player1Mess"),a=document.querySelector("#player2field"),s=document.querySelector("#player2Mess"),c=[o,a],l=[e,n],u=function(e,t){let n=e,r="Player1 Turn";return{add:()=>{if(null==document.querySelector(".turnBlock")){const o=document.createElement("div");o.textContent=`${r}`,o.classList.add("turnBlock"),n.append(o),n===e?(n=t,r="Player2 Turn"):(n=e,r="Player1 Turn")}},remove:()=>{const e=document.querySelector(".turnBlock");null!=e&&e.remove()}}}(o,a);u.add(),c[1].scrollIntoView(),r("Player 2",i),r("Player 1",s);for(let e=0;e<2;e+=1)c[e].addEventListener("click",(n=>{if(!n.target.classList.contains("smallBox"))return;const r=n.target.dataset.id,[o,i]=r.split(",");if(n.target.classList.contains("hit")||n.target.classList.contains("miss")||!n.target.classList.contains("smallBox")||"0"===o||"0"===i)return;c[(e+1)%2].scrollIntoView(),u.remove(),u.add();const a=l[e].receiveAttack([o,i]);t.current=[e+1,[o,i]],a?(n.target.classList.add("hit"),n.target.textContent="X"):n.target.classList.add("miss")}));return new Promise((t=>{const r=document.querySelector("#battleField");let o=null;r.addEventListener("click",(()=>{null===o&&(e.isLost()?o="P2":n.isLost()&&(o="P1"),null!==o&&(t(o),function(e){const t=document.createElement("div");t.classList.add("turnBlock"),e.append(t)}(r)))}))}))},playerControll:function(e){if(!t.layout)throw new Error("require Layout");const n=document.querySelector(`#player${e}field`);return{input:e=>{n.querySelector(`.smallBox[data-id="${e[0]},${e[1]}"]`).dispatchEvent(new CustomEvent("click",{bubbles:!0}))},output:()=>t.current}}}},427:e=>{e.exports=function(){const e={};return{placeShip:(t,n)=>{if(Array.isArray(t[0]))t.forEach((t=>{const[r,o]=t;e[`${r},${o}`]=n}));else{const[r,o]=t;e[`${r},${o}`]=n}},receiveAttack:t=>{const[n,r]=t;return void 0!==e[`${n},${r}`]?(e[`${n},${r}`].hit(),e[`${n},${r}`]="O",!0):(e[`${n},${r}`]="X",!1)},isLost:()=>{let t=!0;return Object.keys(e).forEach((n=>{"object"==typeof e[n]&&(t=!1)})),t},data:e}}},835:e=>{const t={layout:!1,scrip:!1};e.exports={layout:function(e){const n=document.createElement("div");n.textContent="BATTLESHIP";const r=document.createElement("div");r.setAttribute("id","introBox");const o=document.createElement("form");o.setAttribute("id","introForm");const i=document.createElement("div");i.setAttribute("class","nameBox");for(let e=0;e<2;e+=1){const t=document.createElement("label");t.setAttribute("for",`player${e+1}`),t.textContent=`${e+1} Player`,i.innerHTML+=`<br><input id = "${e+1}player" type ="radio"  name ="player" value ="${e+1}">`,i.append(t)}const a=document.createElement("button");a.setAttribute("id","loginButton"),a.textContent="START",e.append(r),o.append(i,a),r.append(n,o),t.layout=!0},script:function(){if(!1===t.layout)return new Promise(((e,t)=>{t(new Error("require layout to run first"))}));const e=document.querySelector("#loginButton");return new Promise((t=>{e.addEventListener("click",(e=>{e.preventDefault();const n=document.querySelector('input[name="player"]:checked');null!==n&&(document.querySelector("#introBox").remove(),t(n.value))}))}))}}},643:e=>{e.exports=function(e){let t=0;const n=e;return{hit:()=>{t+=1},isSunk:()=>t>=n}}},918:e=>{const t={data:[null,null,null,null,null],guess:[],history:[],isHit:!1,shipName:["Carrier","Battleship","Destroyer","Submarine","PatrolBoat"],shipLength:[5,4,3,3,2]};function n(e,t){return Math.floor(Math.random()*(t+1-e)+e)}function r(){let e="row";return 1===n(0,1)&&(e="column"),e}function o(e){let n=!0;const[r,o]=e;r<=10&&o<=10&&o>0&&r>0||(n=!1);for(let e=0;e<5;e+=1){const i=t.data[e];if(null!==i)for(let e=0;e<i.length;e+=1){const[t,a]=i[e];t===r&&a===o&&(n=!1)}}return n}function i(e){let t=!1,i=[];for(;!t;){const[a,s]=[n(1,10),n(1,10)],c=r();for(let t=0;t<e;t+=1){let e=null;if("row"===c?e=[a,s+t]:"column"===c&&(e=[a+t,s]),!o(e)){i=[];break}i.push(e)}i.length===e&&(t=!0)}return i}function a(e){let n=!0;const[r,o]=e;for(let e=0;e<t.history.length;e+=1){const i=t.history[e];if(r===i[0]&&o===i[1]||r>10||o>10||o<=0||r<=0){n=!1;break}}return n}e.exports={placeShip:function(){for(let e=0;e<5;e+=1)t.data[e]=i(t.shipLength[e]);return t.data},Attacking:function(){let e=null;if(t.isHit){const e=t.history.length-1,[n,r]=t.history[e];[[n+1,r],[n-1,r],[n,r+1],[n,r-1]].forEach((e=>{a(e)&&(t.guess.push(e),t.history.push(e))}))}return 0!==t.guess.length?[e]=t.guess.splice(0,1):e=function(){let e=!1,t=null;for(;!e;){const[r,o]=[n(1,10),n(1,10)];a([r,o])&&(t=[r,o],e=!0)}return t}(),t.history.push(e),e},isAttackHit:function(e){t.isHit=e},resetStatus:function(){t.data=[null,null,null,null,null],t.guess=[],t.history=[],t.isHit=!1}}},241:e=>{function t(e){const t=document.createElement("button");return t.id=`${e}Button`,t.textContent=`${e}`,t}e.exports={winScreen:function(e,n){const r=document.createElement("div");r.id="winScreen";const o=document.createElement("div");o.id="winText";let i="Player 1";"P2"===e&&(i="Player 2"),o.textContent=`${i} is the winner !!!`;const a=t("Restart"),s=t("End"),c=document.createElement("div");return c.append(a,s),r.append(o,c),n.append(r),new Promise((e=>{r.addEventListener("click",(t=>{t.target===a?e(!0):t.target===s&&e(!1),r.remove()}))}))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(835),t=n.n(e),r=n(379),o=n.n(r),i=n(795),a=n.n(i),s=n(569),c=n.n(s),l=n(565),u=n.n(l),A=n(216),d=n.n(A),p=n(589),m=n.n(p),f=n(203),h={};h.styleTagTransform=m(),h.setAttributes=u(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=d(),o()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;var C=n(772),y=n.n(C),g=n(901),b={};b.styleTagTransform=m(),b.setAttributes=u(),b.insert=c().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=d(),o()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;var B=n(427),x=n.n(B),v=n(643),I=n.n(v),S=n(241),k=n.n(S),E=n(807),w={};w.styleTagTransform=m(),w.setAttributes=u(),w.insert=c().bind(null,"head"),w.domAPI=a(),w.insertStyleElement=d(),o()(E.Z,w),E.Z&&E.Z.locals&&E.Z.locals;var L=n(918),$=n.n(L);function T(e,t){e.forEach((e=>{const n=e.length,r=I()(n);t.placeShip(e,r)}))}!async function(){const e=document.querySelector("body");t().layout(e);const n=await t().script();let r=!0;for(;r;){y().layout(e,1);const t=await y().setUp("Player 1");let o=null;"2"===n?(y().layout(e,1),o=await y().setUp("Player 2")):o=$().placeShip();const i=x()(),a=x()();T(t,i),T(o,a);const s=y().layout(e,2);if("1"===n){const e=document.querySelector("#player2field"),t=y().playerControll(1);e.addEventListener("click",(e=>{let n=e.target.dataset.id;if(n=n.split(","),n=[Number(n[0]),Number(n[1])],!e.target.classList.contains("smallBox")||e.target.classList.contains("miss")||e.target.classList.contains("hit")||n[0]>10||n[0]<=0||n[1]>10||n[1]<=0)return;const[r,o]=$().Attacking();t.input([r,o]),document.querySelector(`#player1field>.smallBox[data-id="${r},${o}"]`).classList.contains("hit")?$().isAttackHit(!0):$().isAttackHit(!1)}))}const c=await y().battle(i,a);r=await k().winScreen(c,e),$().resetStatus(),s.remove()}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dU4sRUFBa0IsbUJBQXNCLEdBQzlDRCxFQUFHbEksaUJBQWlCLFNBQVMvRSxJQUN6QixJQUFJK0gsRUFBTy9ILEVBQUVSLE9BQU9pRyxRQUFRbEssR0FLNUIsR0FKQXdNLEVBQU1BLEVBQUk5RCxNQUFNLEtBQ2hCOEQsRUFBTSxDQUFDekMsT0FBT3lDLEVBQUksSUFBSXpDLE9BQU95QyxFQUFJLE1BQ1gvSCxFQUFFUixPQUFPZ0UsVUFBVXVELFNBQVMsYUFBZS9HLEVBQUVSLE9BQU9nRSxVQUFVdUQsU0FBUyxTQUMxRi9HLEVBQUVSLE9BQU9nRSxVQUFVdUQsU0FBUyxRQUFVZ0IsRUFBSSxHQUFLLElBQU1BLEVBQUksSUFBSyxHQUFLQSxFQUFJLEdBQUssSUFBTUEsRUFBSSxJQUFNLEVBRTNGLE9BRUosTUFBT3JDLEVBQUVDLEdBQUssZ0JBQ2R1SCxFQUFnQjNGLE1BQU0sQ0FBQzdCLEVBQUVDLElBQ1ZqRyxTQUFTQyxjQUFjLG9DQUFvQytGLEtBQUtDLE9BQ3JFbkMsVUFBVXVELFNBQVMsT0FDekIsaUJBQWdCLEdBRWhCLGlCQUFnQixFQUNwQixHQUVSLENBQ0EsTUFBTXJKLFFBQWUsV0FBY29QLEVBQWFDLEdBRWhERixRQUFxQixjQUFpQm5QLEVBQU9pUCxHQUM3QyxrQkFDQUssRUFBSWxPLFFBQ1IsQ0FDSixDQUFDd0UsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYmF0dGxlRmllbGQuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW50cm8uY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvd2luU2NyZWVuLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2JhdHRsZUZpZWxkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZUJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW50cm8uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcEJPVC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3dpblNjcmVlbi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW50cm8uY3NzPzNlOTQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9iYXR0bGVGaWVsZC5jc3M/YWZiNiIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3dpblNjcmVlbi5jc3M/ZTc5ZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjYmF0dGxlRmllbGR7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA2NjBweCAyNjBweDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGdhcDogMTBweDtcclxufVxyXG4ucGxheWVyRmllbGR7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTEsNjBweCk7XHJcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMSw2MHB4KTtcclxuICAgIGJvcmRlcjogYmxhY2sgc29saWQgMXB4O1xyXG59XHJcbi5tZXNzYWdlQm94e1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgICBib3JkZXI6IGJsYWNrIHNvbGlkIDFweDtcclxuICAgIGhlaWdodDogNDAwcHg7XHJcbn1cclxuLnNtYWxsQm94e1xyXG4gICAgYm9yZGVyOiByZ2IoMTczLCAxNzMsIDE3Mykgc29saWQgMXB4O1xyXG59XHJcblxyXG4uc2hpcHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG59XHJcblxyXG4uc2hpcEVycm9ye1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG59XHJcblxyXG4uYWxlcnRCb3h7XHJcbiAgICBjb2xvcjogcmVkO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm90dG9tOiAwO1xyXG59XHJcblxyXG4jcHJldmlld0JveHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDE1MHB4IDtcclxuICAgIGJvcmRlcjogcmdiKDE3MywgMTczLCAxNzMpIHNvbGlkIDFweDtcclxufVxyXG5cclxuLmhpdHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzcsIDE0NSwgMTQ1KTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5taXNze1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDUxLCAxNjgsIDIyMyk7XHJcbn1cclxuXHJcbi50dXJuQmxvY2t7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgZm9udC1zaXplOiBsYXJnZTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1OCwgMTU3LCAxNTcsMC41KTtcclxufVxyXG5cclxuLm5hbWVUYWd7XHJcbiAgICBzaXplOiAxMHB4O1xyXG59XHJcblxyXG4uQ2FycmllcntcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMzAsIDEzMCwgMjA5KTtcclxufVxyXG4uQmF0dGxlc2hpcHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMTAsIDExMCwgMTc3KTtcclxufVxyXG4uRGVzdHJveWVye1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDkxLCA5MSwgMTQ1KTtcclxufVxyXG4uU3VibWFyaW5le1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDYzLCA2MywgMTAwKTtcclxufVxyXG4uUGF0cm9sQm9hdHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig0MywgNDMsIDY4KTtcclxufSBcclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmF0dGxlRmllbGQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixrQ0FBa0M7SUFDbEMsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixTQUFTO0FBQ2I7QUFDQTtJQUNJLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsc0NBQXNDO0lBQ3RDLG1DQUFtQztJQUNuQyx1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLGFBQWE7QUFDakI7QUFDQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsU0FBUztBQUNiOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsY0FBYztJQUNkLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLG9DQUFvQztJQUNwQyxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLG1DQUFtQztBQUN2Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxZQUFZO0lBQ1oseUNBQXlDO0FBQzdDOztBQUVBO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0ksb0NBQW9DO0FBQ3hDO0FBQ0E7SUFDSSxvQ0FBb0M7QUFDeEM7QUFDQTtJQUNJLGtDQUFrQztBQUN0QztBQUNBO0lBQ0ksa0NBQWtDO0FBQ3RDO0FBQ0E7SUFDSSxpQ0FBaUM7QUFDckNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2JhdHRsZUZpZWxke1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNjYwcHggMjYwcHg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBnYXA6IDEwcHg7XFxyXFxufVxcclxcbi5wbGF5ZXJGaWVsZHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMSw2MHB4KTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTEsNjBweCk7XFxyXFxuICAgIGJvcmRlcjogYmxhY2sgc29saWQgMXB4O1xcclxcbn1cXHJcXG4ubWVzc2FnZUJveHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBvdmVyZmxvdzogYXV0bztcXHJcXG4gICAgYm9yZGVyOiBibGFjayBzb2xpZCAxcHg7XFxyXFxuICAgIGhlaWdodDogNDAwcHg7XFxyXFxufVxcclxcbi5zbWFsbEJveHtcXHJcXG4gICAgYm9yZGVyOiByZ2IoMTczLCAxNzMsIDE3Mykgc29saWQgMXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2hpcHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxufVxcclxcblxcclxcbi5zaGlwRXJyb3J7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLmFsZXJ0Qm94e1xcclxcbiAgICBjb2xvcjogcmVkO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGJvdHRvbTogMDtcXHJcXG59XFxyXFxuXFxyXFxuI3ByZXZpZXdCb3h7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4IDtcXHJcXG4gICAgYm9yZGVyOiByZ2IoMTczLCAxNzMsIDE3Mykgc29saWQgMXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGl0e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTc3LCAxNDUsIDE0NSk7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubWlzc3tcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDUxLCAxNjgsIDIyMyk7XFxyXFxufVxcclxcblxcclxcbi50dXJuQmxvY2t7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1OCwgMTU3LCAxNTcsMC41KTtcXHJcXG59XFxyXFxuXFxyXFxuLm5hbWVUYWd7XFxyXFxuICAgIHNpemU6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5DYXJyaWVye1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMwLCAxMzAsIDIwOSk7XFxyXFxufVxcclxcbi5CYXR0bGVzaGlwe1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTEwLCAxMTAsIDE3Nyk7XFxyXFxufVxcclxcbi5EZXN0cm95ZXJ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5MSwgOTEsIDE0NSk7XFxyXFxufVxcclxcbi5TdWJtYXJpbmV7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig2MywgNjMsIDEwMCk7XFxyXFxufVxcclxcbi5QYXRyb2xCb2F0e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNDMsIDQzLCA2OCk7XFxyXFxufSBcXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNpbnRyb0JveHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGdhcDogMTBweDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDUwMHB4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuI2ludHJvQm94PmRpdjpmaXJzdC1jaGlsZHtcclxuICAgIGZvbnQtc2l6ZTogMTAwcHg7XHJcbn1cclxuI2ludHJvRm9ybXtcclxuICAgIHdpZHRoOiAxNTBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGJvcmRlcjogYmxhY2sgMXB4IHNvbGlkO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgZ2FwOiAxMHB4O1xyXG59XHJcblxyXG4ubmFtZUJveHtcclxuICAgIGdhcDogMjBweDtcclxufVxyXG5cclxuI2xvZ2luQnV0dG9ue1xyXG4gICAgd2lkdGg6IDYwcHg7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9pbnRyby5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYixTQUFTO0lBQ1QsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNpbnRyb0JveHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgZ2FwOiAxMHB4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBoZWlnaHQ6IDUwMHB4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuI2ludHJvQm94PmRpdjpmaXJzdC1jaGlsZHtcXHJcXG4gICAgZm9udC1zaXplOiAxMDBweDtcXHJcXG59XFxyXFxuI2ludHJvRm9ybXtcXHJcXG4gICAgd2lkdGg6IDE1MHB4O1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBib3JkZXI6IGJsYWNrIDFweCBzb2xpZDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm5hbWVCb3h7XFxyXFxuICAgIGdhcDogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuI2xvZ2luQnV0dG9ue1xcclxcbiAgICB3aWR0aDogNjBweDtcXHJcXG4gICAgaGVpZ2h0OiAyMHB4O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290e1xyXG4gICAgLS13aW5TY3JlZW5XaWR0aDogMzUwcHg7XHJcbiAgICAtLXdpblNjcmVlbkhlaWdodDogMTUwcHg7XHJcbn1cclxuXHJcblxyXG5ib2R5e1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbiN3aW5TY3JlZW57XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBnYXA6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMzLCAyMzMsIDE0Mik7XHJcbiAgICBib3JkZXI6IDFweCBibGFjayBzb2xpZDtcclxuICAgIHRvcDpjYWxjKDEwMCUgLSB2YXIoLS13aW5TY3JlZW5IZWlnaHQpKTtcclxuICAgIGxlZnQ6IGNhbGMoNTAlIC0gdmFyKC0td2luU2NyZWVuV2lkdGgpKTtcclxuICAgIHdpZHRoOiB2YXIoLS13aW5TY3JlZW5XaWR0aCk7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXdpblNjcmVlbkhlaWdodCk7XHJcbn1cclxuI3dpblNjcmVlbj5kaXY6bnRoLWNoaWxkKDEpe1xyXG4gICAgZm9udC1zaXplOiA1MHB4O1xyXG59XHJcbiN3aW5TY3JlZW4+ZGl2Om50aC1jaGlsZCgyKXtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGdhcDogMTVweDtcclxufVxyXG5cclxuI1Jlc3RhcnRCdXR0b24sI0VuZEJ1dHRvbntcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3dpblNjcmVlbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx1QkFBdUI7SUFDdkIsd0JBQXdCO0FBQzVCOzs7QUFHQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsU0FBUztJQUNULG9DQUFvQztJQUNwQyx1QkFBdUI7SUFDdkIsdUNBQXVDO0lBQ3ZDLHVDQUF1QztJQUN2Qyw0QkFBNEI7SUFDNUIsOEJBQThCO0FBQ2xDO0FBQ0E7SUFDSSxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFlBQVk7SUFDWixZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290e1xcclxcbiAgICAtLXdpblNjcmVlbldpZHRoOiAzNTBweDtcXHJcXG4gICAgLS13aW5TY3JlZW5IZWlnaHQ6IDE1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5ib2R5e1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcbiN3aW5TY3JlZW57XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzMywgMjMzLCAxNDIpO1xcclxcbiAgICBib3JkZXI6IDFweCBibGFjayBzb2xpZDtcXHJcXG4gICAgdG9wOmNhbGMoMTAwJSAtIHZhcigtLXdpblNjcmVlbkhlaWdodCkpO1xcclxcbiAgICBsZWZ0OiBjYWxjKDUwJSAtIHZhcigtLXdpblNjcmVlbldpZHRoKSk7XFxyXFxuICAgIHdpZHRoOiB2YXIoLS13aW5TY3JlZW5XaWR0aCk7XFxyXFxuICAgIGhlaWdodDogdmFyKC0td2luU2NyZWVuSGVpZ2h0KTtcXHJcXG59XFxyXFxuI3dpblNjcmVlbj5kaXY6bnRoLWNoaWxkKDEpe1xcclxcbiAgICBmb250LXNpemU6IDUwcHg7XFxyXFxufVxcclxcbiN3aW5TY3JlZW4+ZGl2Om50aC1jaGlsZCgyKXtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMTVweDtcXHJcXG59XFxyXFxuXFxyXFxuI1Jlc3RhcnRCdXR0b24sI0VuZEJ1dHRvbntcXHJcXG4gICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJjb25zdCBzdGF0dXMgPSB7XHJcbiAgICBsYXlvdXQgOiBmYWxzZSxcclxuICAgIGN1cnJlbnQ6IFtudWxsLFtudWxsLG51bGxdXSxcclxuICAgIHNoaXBUeXBlOiBbMCxcIlhcIl0sXHJcbiAgICBzaGlwTG9jYXRpb246IFtudWxsLG51bGwsbnVsbCxudWxsLG51bGxdLFxyXG4gICAgc2hpcE5hbWU6WyBcdFwiQ2FycmllclwiLCBcIkJhdHRsZXNoaXBcIiwgXCJEZXN0cm95ZXJcIiwgXCJTdWJtYXJpbmVcIiwgXCJQYXRyb2xCb2F0XCJdLFxyXG4gICAgc2hpcExlbmd0aDpbNSw0LDMsMywyXVxyXG59XHJcblxyXG4vLyBsYXlvdXRcclxuXHJcbmZ1bmN0aW9uIHJlc2V0U3RhdHVzKCl7XHJcbiAgICBzdGF0dXMuY3VycmVudCA9IFtudWxsLFtudWxsLG51bGxdXTtcclxuICAgIHN0YXR1cy5zaGlwVHlwZSA9IFswLFwiWFwiXTtcclxuICAgIHN0YXR1cy5zaGlwTG9jYXRpb24gPSBbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsXTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlRmllbGQoKXtcclxuICAgIGNvbnN0IGZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYXR0bGVGaWVsZFwiKTtcclxuICAgIGZpZWxkLnJlbW92ZSgpO1xyXG4gICAgc3RhdHVzLmxheW91dCA9IGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBncmlkKGxvY2F0aW9uLHNpemUpe1xyXG4gICAgZm9yKGxldCBpID0gMCA7IGkgPD0gc2l6ZTtpKz0gMSl7XHJcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8PSBzaXplOyBqKz0xKXtcclxuICAgICAgICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgYm94LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJzbWFsbEJveFwiKTtcclxuICAgICAgICAgICAgYm94LnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIixgJHtpfSwke2p9YCk7XHJcbiAgICAgICAgICAgIGlmKGkgPT09IDAgJiYgaiA+IDApe1xyXG4gICAgICAgICAgICAgICAgYm94LnRleHRDb250ZW50ID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NCArIGopO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihqID09PSAwICYmIGkgPiAwKXtcclxuICAgICAgICAgICAgICAgIGJveC50ZXh0Q29udGVudCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbG9jYXRpb24uYXBwZW5kKGJveCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxufVxyXG5cclxuZnVuY3Rpb24gbGF5b3V0KGxvY2F0aW9uLCBudW1iZXIpe1xyXG4gICAgaWYodHlwZW9mKG51bWJlcikhPT0gXCJudW1iZXJcIil7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHlwZUVycm9yXCIpO1xyXG4gICAgfVxyXG4gICAgaWYobnVtYmVyID4gMil7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWF4IDJcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYXR0bGVGaWVsZCA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGJhdHRsZUZpZWxkLnNldEF0dHJpYnV0ZShcImlkXCIsXCJiYXR0bGVGaWVsZFwiKVxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG51bWJlcjtpKz0xKXtcclxuICAgICAgICBjb25zdCBwbGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoXCJpZFwiLGBwbGF5ZXIke2krMX1maWVsZGApO1xyXG4gICAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwicGxheWVyRmllbGRcIik7XHJcbiAgICAgICAgZ3JpZChwbGF5ZXIsMTApO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIG1lc3NhZ2VCb3guc2V0QXR0cmlidXRlKFwiaWRcIixgcGxheWVyJHtpKzF9TWVzc2ApO1xyXG4gICAgICAgIG1lc3NhZ2VCb3guc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcIm1lc3NhZ2VCb3hcIik7XHJcbiAgICAgICAgYmF0dGxlRmllbGQuYXBwZW5kKHBsYXllcixtZXNzYWdlQm94KTtcclxuICAgIH1cclxuICAgIGxvY2F0aW9uLmFwcGVuZChiYXR0bGVGaWVsZCk7XHJcbiAgICBzdGF0dXMubGF5b3V0ID0gdHJ1ZTtcclxuICAgIHJldHVybiBiYXR0bGVGaWVsZDtcclxufVxyXG5cclxuLy8gc2V0dXBcclxuXHJcbmZ1bmN0aW9uIG5hbWVUYWcodGV4dCxwbGFjZSl7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2LmlkID0gXCJuYW1ldGFnXCI7XHJcbiAgICBkaXYudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgcGxhY2UuYXBwZW5kKGRpdik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNob29zZVNoaXBUeXBlKCl7XHJcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BsYXllcjFNZXNzXCIpO1xyXG4gICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICAgIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwic2hpcE5hbWVcIik7XHJcbiAgICBzZWxlY3Quc2V0QXR0cmlidXRlKFwiaWRcIixcInNoaXBOYW1lXCIpO1xyXG4gICAgc3RhdHVzLnNoaXBOYW1lLmZvckVhY2goKHNoaXAsaW5kZXgpPT57XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIixgJHtpbmRleH1gKTtcclxuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBgJHtzdGF0dXMuc2hpcE5hbWVbaW5kZXhdfWA7XHJcbiAgICAgICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xyXG4gICAgfSlcclxuICAgIGJveC5hcHBlbmQoc2VsZWN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd3NoaXBQcmV2aWV3KCl7XHJcbiAgICBjb25zdCBtZXNzYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGF5ZXIxTWVzc1wiKTtcclxuICAgIGNvbnN0IHBhc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByZXZpZXdCb3hcIik7XHJcbiAgICBjb25zdCBwcmV2aWV3Qm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHByZXZpZXdCb3guaWQgPSBcInByZXZpZXdCb3hcIjtcclxuICAgIGlmKG1lc3Nib3ggPT09IG51bGwpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmKHBhc3QgIT09IG51bGwpe1xyXG4gICAgICAgIHBhc3QucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBbaW5kZXgsYXhpc10gPSBzdGF0dXMuc2hpcFR5cGU7XHJcbiAgICBjb25zdCBzaGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHNoaXAuc2V0QXR0cmlidXRlKFwiaWRcIixcInNoaXBNb2RlbFwiKTtcclxuICAgIGxldCBkaXJlY3Rpb24gPSBcImNvbHVtblwiO1xyXG4gICAgaWYoYXhpcyA9PT0gXCJZXCIpe1xyXG4gICAgICAgIGRpcmVjdGlvbiA9IFwicm93XCI7XHJcbiAgICB9XHJcbiAgICBzaGlwLnN0eWxlID1gZGlzcGxheTpmbGV4OyBmbGV4LWRpcmVjdGlvbjoke2RpcmVjdGlvbn07YDtcclxuICAgIGZvcihsZXQgaSA9IDA7aTwgc3RhdHVzLnNoaXBMZW5ndGhbaW5kZXhdOyBpKz0xKXtcclxuICAgICAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGJveC5zdHlsZSA9IFwid2lkdGg6MjBweDsgaGVpZ2h0OjIwcHg7IGJvcmRlcjogYmxhY2sgc29saWQgMXB4O1wiXHJcbiAgICAgICAgc2hpcC5hcHBlbmQoYm94KTtcclxuICAgIH1cclxuICAgIHByZXZpZXdCb3guYXBwZW5kKHNoaXApO1xyXG4gICAgbWVzc2JveC5hcHBlbmQocHJldmlld0JveCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZXZpZXdSb3RhdGlvbkJ1dHRvbigpe1xyXG4gICAgY29uc3QgbWVzc2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyMU1lc3NcIik7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsXCJyb3RhdGlvbkJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUm90YXRpb25cIjtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgIGlmKHN0YXR1cy5zaGlwVHlwZVsxXSA9PT0gXCJYXCIpe1xyXG4gICAgICAgICAgICBzdGF0dXMuc2hpcFR5cGVbMV0gPSBcIllcIjtcclxuICAgICAgICB9ZWxzZSBpZihzdGF0dXMuc2hpcFR5cGVbMV0gPT09IFwiWVwiKXtcclxuICAgICAgICAgICAgc3RhdHVzLnNoaXBUeXBlWzFdID0gXCJYXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIG1lc3Nib3guYXBwZW5kKGJ1dHRvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEJ1dHRvbigpe1xyXG4gICAgY29uc3QgbWVzc2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyMU1lc3NcIik7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgYnV0dG9uLmlkID0gXCJzZXRCdXR0b25cIjtcclxuICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU0VUXCI7XHJcbiAgICBtZXNzYm94LmFwcGVuZChidXR0b24pO1xyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tNaXNzaW5nU2hpcCgpe1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBzdGF0dXMuc2hpcExvY2F0aW9uLmZvckVhY2goKGl0ZW0saW5kZXgpPT57XHJcbiAgICAgICAgaWYoaXRlbSA9PT0gbnVsbCB8fCBpdGVtWzBdID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNob3dTaGlwSW5GaWVsZChhcnIsc2hpcE5hbWUpe1xyXG4gICAgaWYoYXJyWzBdID09PSAwIHx8IGFyclsxXSA9PT0gMCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHRhZyA9IHNoaXBOYW1lO1xyXG4gICAgY29uc3QgYXhpcyA9IHN0YXR1cy5zaGlwVHlwZVsxXTtcclxuICAgIGNvbnN0IGxlbmd0aCA9IHN0YXR1cy5zaGlwTGVuZ3RoW3N0YXR1cy5zaGlwVHlwZVswXV07XHJcbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKGxlbmd0aC8yKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gW2FyclswXSAtIG1pZCxhcnJbMV0gLSBtaWRdO1xyXG4gICAgY29uc3QgZW5kID0gW3N0YXJ0WzBdICsgbGVuZ3RoIC0gMSxzdGFydFsxXSArIGxlbmd0aCAtIDFdO1xyXG4gICAgY29uc3QgY29uZGl0aW9uWCA9IChzdGFydFswXSA8PSAwIHx8IGVuZFswXSA+IDEwKSAmJiBheGlzID09PSBcIlhcIjtcclxuICAgIGNvbnN0IGNvbmRpdGlvblkgPSAoc3RhcnRbMV0gPD0gMCB8fCBlbmRbMV0gPiAxMCkgJiYgYXhpcyA9PT0gXCJZXCI7XHJcbiAgICBpZihjb25kaXRpb25YIHx8IGNvbmRpdGlvblkpe1xyXG4gICAgICAgIHRhZyA9IFwic2hpcEVycm9yXCI7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGkgPTAgOyBpPCBsZW5ndGg7IGkrPTEpe1xyXG4gICAgICAgIGlmKGF4aXMgPT09IFwiWFwiKXtcclxuICAgICAgICAgICAgaWYoc3RhcnRbMF0gKyBpID4gMCAmJiBzdGFydFswXSArIGkgPD0gMTApe1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQgPSBcIiR7c3RhcnRbMF0gKyBpfSwke2FyclsxXX1cIl1gKTtcclxuICAgICAgICAgICAgICAgIGJveC5jbGFzc0xpc3QuYWRkKGAke3RhZ31gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNlIGlmKGF4aXMgPT09IFwiWVwiKXtcclxuICAgICAgICAgICAgaWYoc3RhcnRbMV0raSA+IDAgJiYgc3RhcnRbMV0raSA8PSAxMCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZCA9IFwiJHthcnJbMF19LCR7c3RhcnRbMV0rIGl9XCJdYCk7XHJcbiAgICAgICAgICAgICAgICBib3guY2xhc3NMaXN0LmFkZChgJHt0YWd9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVNoaXBJbkZpZWxkKHNoaXBOYW1lKXtcclxuICAgIGxldCBzaGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7c2hpcE5hbWV9YCk7XHJcbiAgICBzaGlwID0gQXJyYXkuZnJvbShzaGlwKTtcclxuICAgIHNoaXAuZm9yRWFjaCgoaXRlbSk9PntcclxuICAgICAgICBjb25zdCBib3ggPSBpdGVtO1xyXG4gICAgICAgIGJveC5jbGFzc0xpc3QucmVtb3ZlKGAke3NoaXBOYW1lfWApO1xyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gaXNTaGlwQ29sbGlkZShzaGlwTmFtZSl7XHJcbiAgICBsZXQgc2hpcExvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7c2hpcE5hbWV9YCk7XHJcbiAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICBzaGlwTG9jYXRpb24gPSBBcnJheS5mcm9tKHNoaXBMb2NhdGlvbik7XHJcbiAgICBzaGlwTG9jYXRpb24uZm9yRWFjaChpdGVtID0+e1xyXG4gICAgICAgIGxldCB0YWcgPSBpdGVtLmNsYXNzTGlzdC52YWx1ZTtcclxuICAgICAgICB0YWcgPSB0YWcuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGlmKHRhZ1syXT09PSBcInNoaXBcIiB8fCB0YWcubGVuZ3RoID49IDQpe1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFsZXJ0RGl2KG1lc3NhZ2Upe1xyXG4gICAgY29uc3QgcGFzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWxlcnRCb3hcIik7XHJcbiAgICBpZihwYXN0ICE9PSBudWxsICl7XHJcbiAgICAgICAgcGFzdC5yZW1vdmUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1lc3NhZ2VCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VCb3hcIik7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJhbGVydEJveFwiKTtcclxuICAgIGRpdi50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICBtZXNzYWdlQm94LmFwcGVuZChkaXYpO1xyXG4gICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgIGRpdi5yZW1vdmUoKTtcclxuICAgIH0sMzAwMCk7IFxyXG59XHJcblxyXG5mdW5jdGlvbiBjb2xsZWN0TG9jYXRpb24oc2hpcE5hbWUpe1xyXG4gICAgbGV0IGFsbExvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7c2hpcE5hbWV9YCk7XHJcbiAgICBhbGxMb2NhdGlvbiA9IEFycmF5LmZyb20oYWxsTG9jYXRpb24pO1xyXG4gICAgY29uc3Qgc2hpcExvY2F0aW9uID0gYWxsTG9jYXRpb24ubWFwKChpdGVtKT0+e1xyXG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gaXRlbS5kYXRhc2V0LmlkO1xyXG4gICAgICAgIGNvbnN0IFt4LHldID0gY29vcmRpbmF0ZXMuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIHJldHVybiBbTnVtYmVyKHgpLE51bWJlcih5KV07XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHNoaXBMb2NhdGlvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VXAobWVzcyl7XHJcbiAgICBpZihzdGF0dXMubGF5b3V0ID09PSBmYWxzZSl7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtZXNzYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGF5ZXIxTWVzc1wiKTtcclxuICAgIG5hbWVUYWcobWVzcyxtZXNzYm94KTtcclxuICAgIGFsZXJ0RGl2KFwiUGxlYXNlIHBsYWNlIHlvdXIgc2hpcCEgaGl0IFNFVCBidXR0b24gd2hlbiB5b3UgZG9uZVwiKVxyXG4gICAgY2hvb3NlU2hpcFR5cGUoKTtcclxuICAgIHByZXZpZXdSb3RhdGlvbkJ1dHRvbigpO1xyXG4gICAgY29uc3QgZW5kID0gbmV3IFByb21pc2UoKHJlc29sdmUpPT57XHJcbiAgICAgICAgc2V0QnV0dG9uKCkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2hlY2tNaXNzaW5nU2hpcCgpO1xyXG4gICAgICAgICAgICBpZihyZXN1bHRbMF0gPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0YXR1cy5zaGlwTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0U3RhdHVzKCk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSBcIm1pc3NpbmcgXCI7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBgJHtzdGF0dXMuc2hpcE5hbWVbaXRlbV19IGBcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBhbGVydERpdih0ZXh0KTsgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuICAgIHNob3dzaGlwUHJldmlldygpO1xyXG4gICAgbWVzc2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NoaXBOYW1lPm9wdGlvbjpjaGVja2VkXCIpO1xyXG4gICAgICAgIGlmKGNoZWNrZWQgPT09IG51bGwpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXR1cy5zaGlwVHlwZVswXSA9IE51bWJlcihjaGVja2VkLnZhbHVlKTtcclxuICAgICAgICBzaG93c2hpcFByZXZpZXcoKTtcclxuICAgIH0pXHJcbiAgICBsZXQgc21hbGxCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3BsYXllcjFmaWVsZD5kaXYuc21hbGxCb3hcIik7XHJcbiAgICBzbWFsbEJveCA9IEFycmF5LmZyb20oc21hbGxCb3gpO1xyXG4gICAgc21hbGxCb3guZm9yRWFjaCgoYm94KT0+e1xyXG4gICAgICAgIGJveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZSk9PntcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzdGF0dXMuc2hpcFR5cGVbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGJveElkID0gZS50YXJnZXQuZGF0YXNldC5pZDtcclxuICAgICAgICAgICAgY29uc3QgW3gseV0gPSBib3hJZC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBzdGF0dXMuc2hpcE5hbWVbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZihzdGF0dXMuc2hpcExvY2F0aW9uW2luZGV4XSAhPT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVTaGlwSW5GaWVsZChzaGlwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBTaG93U2hpcEluRmllbGQoW051bWJlcih4KSxOdW1iZXIoeSldLGAke3NoaXB9YCk7XHJcbiAgICAgICAgICAgIGlmKCFpc1NoaXBDb2xsaWRlKHNoaXApKXtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5zaGlwTG9jYXRpb25baW5kZXhdID0gY29sbGVjdExvY2F0aW9uKHNoaXApO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVNoaXBJbkZpZWxkKHNoaXApO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLnNoaXBMb2NhdGlvbltpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYWxlcnREaXYoXCJzaGlwIGNvbGxpZGVkISEhIFBsZWFzZSBjaG9vc2UgZGlmZmVyZW50IGxvY2F0aW9uIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKGUpPT57XHJcbiAgICAgICAgICAgIGNvbnN0IGJveElkID0gZS50YXJnZXQuZGF0YXNldC5pZDtcclxuICAgICAgICAgICAgY29uc3QgW3gseV0gPSBib3hJZC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIFNob3dTaGlwSW5GaWVsZChbTnVtYmVyKHgpLE51bWJlcih5KV0sXCJzaGlwXCIpO1xyXG4gICAgICAgICAgICBpZihpc1NoaXBDb2xsaWRlKFwic2hpcFwiKSl7XHJcbiAgICAgICAgICAgICAgICBTaG93U2hpcEluRmllbGQoW051bWJlcih4KSxOdW1iZXIoeSldLFwic2hpcEVycm9yXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwoKT0+e1xyXG4gICAgICAgICAgICByZW1vdmVTaGlwSW5GaWVsZChcInNoaXBcIik7XHJcbiAgICAgICAgICAgIHJlbW92ZVNoaXBJbkZpZWxkKFwic2hpcEVycm9yXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGVuZDtcclxufVxyXG5cclxuLy8gYmF0dGxlXHJcblxyXG5mdW5jdGlvbiB0dXJuQmxvY2socGxheWVyMSxwbGF5ZXIyKXtcclxuICAgIGxldCBub3dCbG9jayA9IHBsYXllcjE7XHJcbiAgICBsZXQgdGV4dCA9IFwiUGxheWVyMSBUdXJuXCI7XHJcbiAgICBjb25zdCBhZGQgPSAoKT0+e1xyXG4gICAgICAgIGNvbnN0IHBhc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnR1cm5CbG9ja1wiKTtcclxuICAgICAgICBpZihwYXN0ID09PSB1bmRlZmluZWQgfHwgcGFzdCA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9YCR7dGV4dH1gO1xyXG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChcInR1cm5CbG9ja1wiKTtcclxuICAgICAgICAgICAgbm93QmxvY2suYXBwZW5kKGRpdik7XHJcbiAgICAgICAgICAgIGlmKG5vd0Jsb2NrID09PSBwbGF5ZXIxKXtcclxuICAgICAgICAgICAgICAgIG5vd0Jsb2NrID0gcGxheWVyMjtcclxuICAgICAgICAgICAgICAgIHRleHQgPSBcIlBsYXllcjIgVHVyblwiO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIG5vd0Jsb2NrID0gcGxheWVyMTsgXHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gXCJQbGF5ZXIxIFR1cm5cIjtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9ICBcclxuICAgIH1cclxuICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+e1xyXG4gICAgICAgIGNvbnN0IGJrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50dXJuQmxvY2tcIik7XHJcbiAgICAgICAgaWYoYmsgIT09IHVuZGVmaW5lZCAmJiBiayAhPT0gbnVsbCApe1xyXG4gICAgICAgICAgICBiay5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge2FkZCxyZW1vdmV9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJsb2NrSW5wdXQodGFyZ2V0KXtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcInR1cm5CbG9ja1wiKTtcclxuICAgIHRhcmdldC5hcHBlbmQoZGl2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheWVyQ29udHJvbGwocGxheWVyTnVtYmVyKXtcclxuICAgIGNvbnN0IHJlcXVpcmUgPSBzdGF0dXMubGF5b3V0O1xyXG4gICAgaWYoIXJlcXVpcmUpe1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVpcmUgTGF5b3V0XCIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3BsYXllciR7cGxheWVyTnVtYmVyfWZpZWxkYCk7XHJcbiAgICBjb25zdCBpbnB1dCA9IChhcnIpPT57XHJcbiAgICAgICAgY29uc3QgYm94ID0gUGxheWVyLnF1ZXJ5U2VsZWN0b3IoYC5zbWFsbEJveFtkYXRhLWlkPVwiJHthcnJbMF19LCR7YXJyWzFdfVwiXWApO1xyXG4gICAgICAgIGJveC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY2xpY2snLCB7YnViYmxlczogdHJ1ZSx9KSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvdXRwdXQgPSAoKT0+IHN0YXR1cy5jdXJyZW50O1xyXG5cclxuICAgIHJldHVybiB7aW5wdXQsb3V0cHV0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBiYXR0bGUocGxheWVyMURhdGEscGxheWVyMkRhdGEpe1xyXG4gICAgaWYoc3RhdHVzLmxheW91dCA9PT0gZmFsc2Upe1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGxheWVyMUZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGF5ZXIxZmllbGRcIik7XHJcbiAgICBjb25zdCBwbGF5ZXIxTWVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyMU1lc3NcIik7XHJcbiAgICBjb25zdCBwbGF5ZXIyRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BsYXllcjJmaWVsZFwiKTtcclxuICAgIGNvbnN0IHBsYXllcjJNZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGF5ZXIyTWVzc1wiKTtcclxuICAgIGNvbnN0IHBsYXllckZpZWxkID0gW3BsYXllcjFGaWVsZCxwbGF5ZXIyRmllbGRdOyBcclxuICAgIGNvbnN0IHBsYXllckRhdGEgPSBbcGxheWVyMURhdGEscGxheWVyMkRhdGFdO1xyXG5cclxuICAgIGNvbnN0IEJsb2NrID0gdHVybkJsb2NrKHBsYXllcjFGaWVsZCxwbGF5ZXIyRmllbGQpO1xyXG4gICAgQmxvY2suYWRkKCk7XHJcbiAgICBwbGF5ZXJGaWVsZFsxXS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgbmFtZVRhZyhcIlBsYXllciAyXCIscGxheWVyMU1lc3MpO1xyXG4gICAgbmFtZVRhZyhcIlBsYXllciAxXCIscGxheWVyMk1lc3MpO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDA7aSA8IDI7aSs9MSl7XHJcbiAgICAgICAgcGxheWVyRmllbGRbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGUpPT57XHJcbiAgICAgICAgICAgIGlmKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJzbWFsbEJveFwiKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSAgZS50YXJnZXQuZGF0YXNldC5pZDtcclxuICAgICAgICAgICAgY29uc3QgW3gseV0gPSBjb29yZGluYXRlcy5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImhpdFwiKSBcclxuICAgICAgICAgICAgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWlzc1wiKSBcclxuICAgICAgICAgICAgfHwgIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInNtYWxsQm94XCIpIHx8IHggPT09IFwiMFwiIHx8IHkgPT09IFwiMFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoY29uZGl0aW9uKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwbGF5ZXJGaWVsZFsoaSsxKSUyXS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgICAgICBCbG9jay5yZW1vdmUoKTtcclxuICAgICAgICAgICAgQmxvY2suYWRkKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBwbGF5ZXJEYXRhW2ldLnJlY2VpdmVBdHRhY2soW3gseV0pO1xyXG4gICAgICAgICAgICBzdGF0dXMuY3VycmVudCA9IFtpKzEsW3gseV1dO1xyXG4gICAgICAgICAgICBpZihyZXN1bHQpe1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcImhpdFwiKTtcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnRleHRDb250ZW50ID0gXCJYXCJcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT57XHJcbiAgICAgICAgY29uc3QgZmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JhdHRsZUZpZWxkXCIpO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsXHJcbiAgICAgICAgZmllbGQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcclxuICAgICAgICAgICAgaWYocmVzdWx0ID09PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGlmKHBsYXllcjFEYXRhLmlzTG9zdCgpKXtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBcIlAyXCI7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihwbGF5ZXIyRGF0YS5pc0xvc3QoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCJQMVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYocmVzdWx0ICE9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tJbnB1dChmaWVsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSlcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge2xheW91dCxzZXRVcCxiYXR0bGUscGxheWVyQ29udHJvbGx9OyAiLCJmdW5jdGlvbiBnYW1lQm9hcmQoKXtcclxuICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuXHJcbiAgICBjb25zdCBwbGFjZVNoaXAgPSAoYXJyLG9qYik9PntcclxuICAgICAgICBpZihBcnJheS5pc0FycmF5KGFyclswXSkpe1xyXG4gICAgICAgICAgICBhcnIuZm9yRWFjaChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbeCx5XSA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICBkYXRhW2Ake3h9LCR7eX1gXSA9IG9qYjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29uc3QgW3gseV0gPSBhcnI7XHJcbiAgICAgICAgICAgIGRhdGFbYCR7eH0sJHt5fWBdID0gb2piO1xyXG4gICAgICAgIH0gIFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoYXJyKT0+e1xyXG4gICAgICAgIGNvbnN0IFt4LHldID0gYXJyO1xyXG4gICAgICAgIGlmKGRhdGFbYCR7eH0sJHt5fWBdICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBkYXRhW2Ake3h9LCR7eX1gXS5oaXQoKTtcclxuICAgICAgICAgICAgZGF0YVtgJHt4fSwke3l9YF0gPSBcIk9cIjtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGFbYCR7eH0sJHt5fWBdID0gXCJYXCI7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzTG9zdCA9ICgpPT57XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChpdGVtPT57XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZihkYXRhW2l0ZW1dKSA9PT0gXCJvYmplY3RcIil7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge3BsYWNlU2hpcCxyZWNlaXZlQXR0YWNrLGlzTG9zdCxkYXRhfTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnYW1lQm9hcmQ7IiwiY29uc3Qgc3RhdHVzID0ge1xyXG4gICAgbGF5b3V0OiBmYWxzZSxcclxuICAgIHNjcmlwOiBmYWxzZSxcclxufVxyXG5cclxuZnVuY3Rpb24gbGF5b3V0KGxvY2F0aW9uKXtcclxuICAgIGNvbnN0IHRpbHRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHRpbHRlLnRleHRDb250ZW50ID0gXCJCQVRUTEVTSElQXCJcclxuICAgIGNvbnN0IGludHJvQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGludHJvQm94LnNldEF0dHJpYnV0ZShcImlkXCIsXCJpbnRyb0JveFwiKTtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICAgIGZvcm0uc2V0QXR0cmlidXRlKFwiaWRcIixcImludHJvRm9ybVwiKTtcclxuICAgIGNvbnN0IG5hbWVCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbmFtZUJveC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwibmFtZUJveFwiKVxyXG4gICAgZm9yKGxldCBpID0gMDsgaTwyIDsgaSs9MSl7XHJcbiAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsYHBsYXllciR7aSsxfWApO1xyXG4gICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gYCR7aSsxfSBQbGF5ZXJgXHJcbiAgICAgICAgbmFtZUJveC5pbm5lckhUTUwgKz0gYDxicj48aW5wdXQgaWQgPSBcIiR7aSsxfXBsYXllclwiIHR5cGUgPVwicmFkaW9cIiAgbmFtZSA9XCJwbGF5ZXJcIiB2YWx1ZSA9XCIke2krMX1cIj5gO1xyXG4gICAgICAgIG5hbWVCb3guYXBwZW5kKGxhYmVsKVxyXG4gICAgfVxyXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwibG9naW5CdXR0b25cIik7XHJcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSBcIlNUQVJUXCJcclxuICAgIGxvY2F0aW9uLmFwcGVuZChpbnRyb0JveCk7XHJcbiAgICBmb3JtLmFwcGVuZChuYW1lQm94LGJ1dHRvbik7XHJcbiAgICBpbnRyb0JveC5hcHBlbmQodGlsdGUsZm9ybSk7XHJcbiAgICBzdGF0dXMubGF5b3V0ID0gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2NyaXB0KCl7XHJcbiAgICBpZihzdGF0dXMubGF5b3V0ID09PSBmYWxzZSl7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvciAoXCJyZXF1aXJlIGxheW91dCB0byBydW4gZmlyc3RcIikpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBidXR0b24gPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG9naW5CdXR0b25cIik7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGUpPT57XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgbW9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJwbGF5ZXJcIl06Y2hlY2tlZCcpO1xyXG4gICAgICAgICAgICBpZihtb2RlICE9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludHJvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbnRyb0JveFwiKTtcclxuICAgICAgICAgICAgICAgIGludHJvLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtb2RlLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pICAgIFxyXG4gICAgfSlcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7bGF5b3V0LHNjcmlwdH07IiwiZnVuY3Rpb24gc2hpcChudW0pe1xyXG4gICAgbGV0IGRhbWFnZWQgPSAwO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gbnVtO1xyXG4gICAgY29uc3QgaGl0ID0gKCk9PntcclxuICAgICAgICBkYW1hZ2VkICs9MTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlzU3VuayA9ICgpPT5kYW1hZ2VkID49IGxlbmd0aDtcclxuICAgIHJldHVybntoaXQsaXNTdW5rfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHNoaXA7IiwiY29uc3Qgc2hpcEJvdCA9IHtcclxuICAgIGRhdGE6IFtudWxsLG51bGwsbnVsbCxudWxsLG51bGxdLFxyXG4gICAgZ3Vlc3M6W10sXHJcbiAgICBoaXN0b3J5OltdLFxyXG4gICAgaXNIaXQ6ZmFsc2UsXHJcbiAgICBzaGlwTmFtZTpbXCJDYXJyaWVyXCIsIFwiQmF0dGxlc2hpcFwiLCBcIkRlc3Ryb3llclwiLCBcIlN1Ym1hcmluZVwiLCBcIlBhdHJvbEJvYXRcIl0sXHJcbiAgICBzaGlwTGVuZ3RoOls1LDQsMywzLDJdXHJcbn0gXHJcblxyXG5mdW5jdGlvbiByZXNldFN0YXR1cygpe1xyXG4gICAgc2hpcEJvdC5kYXRhID0gW251bGwsbnVsbCxudWxsLG51bGwsbnVsbF07XHJcbiAgICBzaGlwQm90Lmd1ZXNzID0gW107XHJcbiAgICBzaGlwQm90Lmhpc3RvcnkgPSBbXTtcclxuICAgIHNoaXBCb3QuaXNIaXQgPSBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmFuZG9tKHN0YXJ0LGVuZCl7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSooZW5kICsgMSAtIHN0YXJ0KSkgKyBzdGFydCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJhbmRvbVBvc2l0aW9uKCl7XHJcbiAgICBsZXQgcG9zaXRpb24gPSBcInJvd1wiXHJcbiAgICBjb25zdCByZCA9IHJhbmRvbSgwLDEpO1xyXG4gICAgaWYocmQgPT09IDEpe1xyXG4gICAgICAgIHBvc2l0aW9uID0gXCJjb2x1bW5cIjtcclxuICAgIH1cclxuICAgIHJldHVybiBwb3NpdGlvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tpbmcoYXJyKXtcclxuICAgIGxldCByZXN1bHQgPSB0cnVlO1xyXG4gICAgY29uc3QgW3gseV0gPSBhcnI7XHJcbiAgICBjb25zdCBjb25kaXRpb24gPSB4IDw9IDEwICYmIHkgPD0gMTAgJiYgeSA+MCAmJiB4ID4gMDtcclxuICAgIGlmKCFjb25kaXRpb24pe1xyXG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpICA9IDAgOyBpPCA1OyBpKz0xKXtcclxuICAgICAgICBjb25zdCBpdGVtID0gc2hpcEJvdC5kYXRhW2ldXHJcbiAgICAgICAgaWYoaXRlbSAhPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDAgO2ogPCBpdGVtLmxlbmd0aDtqKz0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtkYXRhWCxkYXRhWV0gPSBpdGVtW2pdO1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YVggPT09IHggJiYgZGF0YVkgPT09IHkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRpbmdTaGlwKHNoaXBsZW5ndGgpe1xyXG4gICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xyXG4gICAgbGV0IHNoaXAgPSBbXTtcclxuICAgIHdoaWxlKCFpc0RvbmUpe1xyXG4gICAgICAgIGNvbnN0IFt4LHldID0gW3JhbmRvbSgxLDEwKSxyYW5kb20oMSwxMCldO1xyXG4gICAgICAgIGNvbnN0IHBvcyA9IHJhbmRvbVBvc2l0aW9uKCk7XHJcbiAgICAgICAgZm9yKGxldCBpID0wIDtpIDwgc2hpcGxlbmd0aDsgaSs9MSl7XHJcbiAgICAgICAgICAgIGxldCBuZXdDb29yZGluYXRlcyA9IG51bGw7ICBcclxuICAgICAgICAgICAgaWYocG9zID09PSBcInJvd1wiKXtcclxuICAgICAgICAgICAgICAgIG5ld0Nvb3JkaW5hdGVzID0gW3gseStpXTtcclxuICAgICAgICAgICAgfWVsc2UgaWYocG9zID09PSBcImNvbHVtblwiKXtcclxuICAgICAgICAgICAgICAgIG5ld0Nvb3JkaW5hdGVzID0gW3ggKyBpLHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFjaGVja2luZyhuZXdDb29yZGluYXRlcykpe1xyXG4gICAgICAgICAgICAgICAgc2hpcCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hpcC5wdXNoKG5ld0Nvb3JkaW5hdGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoc2hpcC5sZW5ndGggPT09IHNoaXBsZW5ndGgpe1xyXG4gICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzaGlwOyBcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHBsYWNlU2hpcCgpe1xyXG4gICAgZm9yKGxldCBpID0gMDtpIDwgNTtpKz0xKXtcclxuICAgICAgICBzaGlwQm90LmRhdGFbaV0gPSBnZW5lcmF0aW5nU2hpcChzaGlwQm90LnNoaXBMZW5ndGhbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNoaXBCb3QuZGF0YTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNBdHRhY2tWYWxpZChhcnIpe1xyXG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XHJcbiAgICBjb25zdCBbeCx5XSA9IGFycjtcclxuICAgIGZvcihsZXQgaSA9IDAgOyBpPCBzaGlwQm90Lmhpc3RvcnkubGVuZ3RoO2krPTEpe1xyXG4gICAgICAgIGNvbnN0IGhpc3RvcnkgPSBzaGlwQm90Lmhpc3RvcnlbaV07XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uID0gKHggPT09IGhpc3RvcnlbMF0gJiYgeSA9PT0gaGlzdG9yeVsxXSkgXHJcbiAgICAgICAgfHwgeCA+IDEwIHx8IHkgPiAxMCB8fCB5IDw9IDAgfHwgeCA8PSAwIDtcclxuICAgICAgICBpZihjb25kaXRpb24pe1xyXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGluZ0F0dGFjaygpe1xyXG4gICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xyXG4gICAgbGV0IG5ld0F0YWNrID0gbnVsbDtcclxuICAgIHdoaWxlKCFpc0RvbmUpe1xyXG4gICAgICAgIGNvbnN0IFt4LHldID0gW3JhbmRvbSgxLDEwKSxyYW5kb20oMSwxMCldO1xyXG4gICAgICAgIGlmKGlzQXR0YWNrVmFsaWQoW3gseV0pKXtcclxuICAgICAgICAgICAgbmV3QXRhY2sgPSBbeCx5XTtcclxuICAgICAgICAgICAgaXNEb25lID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3QXRhY2s7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEF0dGFja2luZygpe1xyXG4gICAgbGV0IGF0dGFjayA9IG51bGw7XHJcbiAgICBpZihzaGlwQm90LmlzSGl0KXtcclxuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBzaGlwQm90Lmhpc3RvcnkubGVuZ3RoIC0gMTtcclxuICAgICAgICBjb25zdCBbeCx5XSA9IHNoaXBCb3QuaGlzdG9yeVtsYXN0SW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IGd1ZXNzID0gW1t4ICsgMSx5XSxbeC0xLHldLFt4LHkrMV0sW3gseS0xXV07XHJcbiAgICAgICAgZ3Vlc3MuZm9yRWFjaChpdGVtID0+e1xyXG4gICAgICAgICAgICBpZihpc0F0dGFja1ZhbGlkKGl0ZW0pKXtcclxuICAgICAgICAgICAgICAgIHNoaXBCb3QuZ3Vlc3MucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHNoaXBCb3QuaGlzdG9yeS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoc2hpcEJvdC5ndWVzcy5sZW5ndGggIT09IDApe1xyXG4gICAgICAgIFthdHRhY2tdID0gc2hpcEJvdC5ndWVzcy5zcGxpY2UoMCwxKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGF0dGFjayA9IGdlbmVyYXRpbmdBdHRhY2soKTtcclxuICAgIH1cclxuICAgIHNoaXBCb3QuaGlzdG9yeS5wdXNoKGF0dGFjayk7XHJcbiAgICByZXR1cm4gYXR0YWNrO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0F0dGFja0hpdChib29sKXtcclxuICAgIHNoaXBCb3QuaXNIaXQgPSBib29sO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9e3BsYWNlU2hpcCxBdHRhY2tpbmcsaXNBdHRhY2tIaXQscmVzZXRTdGF0dXN9OyIsImZ1bmN0aW9uIEJ1dHRvbih0ZXh0KXtcclxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICBidXR0b24uaWQgPSBgJHt0ZXh0fUJ1dHRvbmA7XHJcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSBgJHt0ZXh0fWA7XHJcbiAgICByZXR1cm4gYnV0dG9uO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHdpblNjcmVlbih3aW5uZXIsdGFyZ2V0KXtcclxuICAgIGNvbnN0IHdpbkJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICB3aW5Cb3guaWQgPSBcIndpblNjcmVlblwiO1xyXG4gICAgY29uc3Qgd2luID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHdpbi5pZCA9XCJ3aW5UZXh0XCI7XHJcbiAgICBsZXQgd2ludGV4dCA9IFwiUGxheWVyIDFcIjtcclxuICAgIGlmKHdpbm5lciA9PT0gXCJQMlwiKXtcclxuICAgICAgICB3aW50ZXh0ID0gXCJQbGF5ZXIgMlwiXHJcbiAgICB9XHJcbiAgICB3aW4udGV4dENvbnRlbnQgPSBgJHt3aW50ZXh0fSBpcyB0aGUgd2lubmVyICEhIWBcclxuICAgIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBCdXR0b24oXCJSZXN0YXJ0XCIpO1xyXG4gICAgY29uc3QgZW5kQnV0dG9uID0gQnV0dG9uKFwiRW5kXCIpO1xyXG4gICAgY29uc3QgQnV0dG9uQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIEJ1dHRvbkJveC5hcHBlbmQocmVzdGFydEJ1dHRvbixlbmRCdXR0b24pXHJcbiAgICB3aW5Cb3guYXBwZW5kKHdpbixCdXR0b25Cb3gpO1xyXG4gICAgdGFyZ2V0LmFwcGVuZCh3aW5Cb3gpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PntcclxuICAgICAgICB3aW5Cb3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGUpPT57XHJcbiAgICAgICAgICAgIGlmKGUudGFyZ2V0ID09PSByZXN0YXJ0QnV0dG9uKXtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKGUudGFyZ2V0ID09PSBlbmRCdXR0b24pe1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2luQm94LnJlbW92ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7d2luU2NyZWVufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW50cm8uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnRyby5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYmF0dGxlRmllbGQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9iYXR0bGVGaWVsZC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2luU2NyZWVuLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2luU2NyZWVuLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cclxuaW1wb3J0IHN0YWdlMSBmcm9tIFwiLi9pbnRyb1wiO1xyXG5pbXBvcnQgJy4vaW50cm8uY3NzJztcclxuaW1wb3J0IHN0YWdlMiBmcm9tIFwiLi9iYXR0bGVGaWVsZFwiO1xyXG5pbXBvcnQgJy4vYmF0dGxlRmllbGQuY3NzJztcclxuaW1wb3J0IGdhbWVCcm9hZCBmcm9tICcuL2dhbWVCb2FyZCc7XHJcbmltcG9ydCBzaGlwIGZyb20gJy4vc2hpcCc7XHJcbmltcG9ydCBzdGFnZTMgZnJvbSBcIi4vd2luU2NyZWVuXCI7XHJcbmltcG9ydCBcIi4vd2luU2NyZWVuLmNzc1wiO1xyXG5pbXBvcnQgYm90IGZyb20gJy4vc2hpcEJPVCc7XHJcblxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU2hpcChhcnIsb2JqKXtcclxuICAgIGFyci5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGNvbnN0IEwgPSBpdGVtLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBuZXdTaGlwID0gc2hpcChMKTtcclxuICAgICAgICBvYmoucGxhY2VTaGlwKGl0ZW0sbmV3U2hpcCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzdGFydCgpe1xyXG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xyXG4gICAgc3RhZ2UxLmxheW91dChib2R5KTtcclxuICAgIGNvbnN0IHBsYXllck51bSA9IGF3YWl0IHN0YWdlMS5zY3JpcHQoKTtcclxuICAgIGxldCBjb250aW51ZUdhbWUgPSB0cnVlO1xyXG4gICAgd2hpbGUoY29udGludWVHYW1lKXtcclxuICAgICAgICBzdGFnZTIubGF5b3V0KGJvZHksMSk7XHJcbiAgICAgICAgY29uc3QgcGxheWVyMSA9IGF3YWl0IHN0YWdlMi5zZXRVcChcIlBsYXllciAxXCIpO1xyXG4gICAgICAgIGxldCBwbGF5ZXIyID0gbnVsbDtcclxuICAgICAgICBpZihwbGF5ZXJOdW0gPT09IFwiMlwiKXtcclxuICAgICAgICAgICAgc3RhZ2UyLmxheW91dChib2R5LDEpO1xyXG4gICAgICAgICAgICBwbGF5ZXIyID0gYXdhaXQgc3RhZ2UyLnNldFVwKFwiUGxheWVyIDJcIik7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHBsYXllcjIgPSBib3QucGxhY2VTaGlwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBsYXllcjFCb2FyZCA9IGdhbWVCcm9hZCgpO1xyXG4gICAgICAgIGNvbnN0IHBsYXllcjJCb2FyZCA9IGdhbWVCcm9hZCgpO1xyXG4gICAgICAgIGNyZWF0ZVNoaXAocGxheWVyMSxwbGF5ZXIxQm9hcmQpO1xyXG4gICAgICAgIGNyZWF0ZVNoaXAocGxheWVyMixwbGF5ZXIyQm9hcmQpO1xyXG4gICAgICAgIGNvbnN0IFB2UCA9IHN0YWdlMi5sYXlvdXQoYm9keSwyKTtcclxuICAgICAgICAgLy8gc2V0dXAgQm90XHJcbiAgICAgICAgIGlmKHBsYXllck51bSA9PT0gXCIxXCIpe1xyXG4gICAgICAgICAgICBjb25zdCBQMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGxheWVyMmZpZWxkXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIyQ29udHJvbGwgPSBzdGFnZTIucGxheWVyQ29udHJvbGwoMSk7XHJcbiAgICAgICAgICAgIFAxLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChlKT0+e1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpdCAgPSBlLnRhcmdldC5kYXRhc2V0LmlkO1xyXG4gICAgICAgICAgICAgICAgaGl0ID0gaGl0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIGhpdCA9IFtOdW1iZXIoaGl0WzBdKSxOdW1iZXIoaGl0WzFdKV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc1BsYXllck1vdmUgPSAhZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic21hbGxCb3hcIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWlzc1wiKSBcclxuICAgICAgICAgICAgICAgIHx8IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImhpdFwiKSB8fCBoaXRbMF0gPiAxMCB8fCBoaXRbMF0gPD0wIHx8IGhpdFsxXSA+IDEwIHx8IGhpdFsxXSA8PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYoaXNQbGF5ZXJNb3ZlKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbeCx5XSA9IGJvdC5BdHRhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIHBsYXllcjJDb250cm9sbC5pbnB1dChbeCx5XSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoaXRCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcGxheWVyMWZpZWxkPi5zbWFsbEJveFtkYXRhLWlkPVwiJHt4fSwke3l9XCJdYCk7XHJcbiAgICAgICAgICAgICAgICBpZihoaXRCb3guY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGl0XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICBib3QuaXNBdHRhY2tIaXQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBib3QuaXNBdHRhY2tIaXQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RhZ2UyLmJhdHRsZShwbGF5ZXIxQm9hcmQscGxheWVyMkJvYXJkKTtcclxuICAgICAgICAvLyBzZXR1cCBCb3RcclxuICAgICAgICBjb250aW51ZUdhbWUgPSBhd2FpdCBzdGFnZTMud2luU2NyZWVuKHJlc3VsdCxib2R5KTtcclxuICAgICAgICBib3QucmVzZXRTdGF0dXMoKTtcclxuICAgICAgICBQdlAucmVtb3ZlKCk7ICBcclxuICAgIH1cclxufXN0YXJ0KCk7XHJcblxyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJzdGF0dXMiLCJsYXlvdXQiLCJjdXJyZW50Iiwic2hpcFR5cGUiLCJzaGlwTG9jYXRpb24iLCJzaGlwTmFtZSIsInNoaXBMZW5ndGgiLCJncmlkIiwibG9jYXRpb24iLCJzaXplIiwiaiIsImJveCIsInRleHRDb250ZW50IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwZW5kIiwibmFtZVRhZyIsInRleHQiLCJwbGFjZSIsImRpdiIsInNob3dzaGlwUHJldmlldyIsIm1lc3Nib3giLCJwYXN0IiwicHJldmlld0JveCIsImF4aXMiLCJzaGlwIiwiZGlyZWN0aW9uIiwiU2hvd1NoaXBJbkZpZWxkIiwiYXJyIiwidGFnIiwibWlkIiwiTWF0aCIsImZsb29yIiwic3RhcnQiLCJlbmQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVTaGlwSW5GaWVsZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwiaXNTaGlwQ29sbGlkZSIsInZhbHVlIiwic3BsaXQiLCJhbGVydERpdiIsIm1lc3NhZ2UiLCJtZXNzYWdlQm94Iiwic2V0VGltZW91dCIsIm51bWJlciIsImJhdHRsZUZpZWxkIiwicGxheWVyIiwic2V0VXAiLCJtZXNzIiwic2VsZWN0Iiwib3B0aW9uIiwiY2hvb3NlU2hpcFR5cGUiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmlld1JvdGF0aW9uQnV0dG9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRCdXR0b24iLCJjaGVja01pc3NpbmdTaGlwIiwiY2hlY2tlZCIsIk51bWJlciIsInNtYWxsQm94IiwiYm94SWQiLCJkYXRhc2V0IiwieCIsInkiLCJhbGxMb2NhdGlvbiIsImNvb3JkaW5hdGVzIiwiY29sbGVjdExvY2F0aW9uIiwiYmF0dGxlIiwicGxheWVyMURhdGEiLCJwbGF5ZXIyRGF0YSIsInBsYXllcjFGaWVsZCIsInBsYXllcjFNZXNzIiwicGxheWVyMkZpZWxkIiwicGxheWVyMk1lc3MiLCJwbGF5ZXJGaWVsZCIsInBsYXllckRhdGEiLCJCbG9jayIsInBsYXllcjEiLCJwbGF5ZXIyIiwibm93QmxvY2siLCJiayIsInR1cm5CbG9jayIsInNjcm9sbEludG9WaWV3IiwiY29udGFpbnMiLCJyZWNlaXZlQXR0YWNrIiwiZmllbGQiLCJpc0xvc3QiLCJibG9ja0lucHV0IiwicGxheWVyQ29udHJvbGwiLCJwbGF5ZXJOdW1iZXIiLCJQbGF5ZXIiLCJpbnB1dCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJvdXRwdXQiLCJwbGFjZVNoaXAiLCJvamIiLCJpc0FycmF5IiwiaGl0IiwiT2JqZWN0Iiwia2V5cyIsInNjcmlwIiwidGlsdGUiLCJpbnRyb0JveCIsImZvcm0iLCJuYW1lQm94IiwibGFiZWwiLCJpbm5lckhUTUwiLCJzY3JpcHQiLCJyZWplY3QiLCJwcmV2ZW50RGVmYXVsdCIsIm1vZGUiLCJudW0iLCJkYW1hZ2VkIiwiaXNTdW5rIiwic2hpcEJvdCIsImd1ZXNzIiwiaGlzdG9yeSIsImlzSGl0IiwicmFuZG9tIiwicmFuZG9tUG9zaXRpb24iLCJwb3NpdGlvbiIsImNoZWNraW5nIiwiZGF0YVgiLCJkYXRhWSIsImdlbmVyYXRpbmdTaGlwIiwic2hpcGxlbmd0aCIsImlzRG9uZSIsInBvcyIsIm5ld0Nvb3JkaW5hdGVzIiwiaXNBdHRhY2tWYWxpZCIsIkF0dGFja2luZyIsImF0dGFjayIsImxhc3RJbmRleCIsIm5ld0F0YWNrIiwiZ2VuZXJhdGluZ0F0dGFjayIsImlzQXR0YWNrSGl0IiwiYm9vbCIsInJlc2V0U3RhdHVzIiwiQnV0dG9uIiwid2luU2NyZWVuIiwid2lubmVyIiwid2luQm94Iiwid2luIiwid2ludGV4dCIsInJlc3RhcnRCdXR0b24iLCJlbmRCdXR0b24iLCJCdXR0b25Cb3giLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwibG9jYWxzIiwiY3JlYXRlU2hpcCIsIkwiLCJuZXdTaGlwIiwiYXN5bmMiLCJib2R5IiwicGxheWVyTnVtIiwiY29udGludWVHYW1lIiwicGxheWVyMUJvYXJkIiwicGxheWVyMkJvYXJkIiwiUHZQIiwiUDEiLCJwbGF5ZXIyQ29udHJvbGwiXSwic291cmNlUm9vdCI6IiJ9